"use strict";(self.webpackChunkcasdk_docs=self.webpackChunkcasdk_docs||[]).push([[2087],{8591:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var a=r(4848),s=r(8453);const t={sidebar_position:4},i="C# Client Library",l={id:"architecture/c-sharp-client-library",title:"C# Client Library",description:"Client Library",source:"@site/docs/architecture/c-sharp-client-library.md",sourceDirName:"architecture",slug:"/architecture/c-sharp-client-library",permalink:"/docs/architecture/c-sharp-client-library",draft:!1,unlisted:!1,editUrl:"https://github.com/Green-Software-Foundation/carbon-aware-sdk/docs/architecture/c-sharp-client-library.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Data Sources",permalink:"/docs/architecture/data-sources"},next:{title:"1. Title",permalink:"/docs/architecture/decisions/ladr-template"}},d={},c=[{value:"Namespace",id:"namespace",level:2},{value:"Features",id:"features",level:2},{value:"Models",id:"models",level:3},{value:"Handlers",id:"handlers",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Carbon Aware Parameters",id:"carbon-aware-parameters",level:2},{value:"Parameter Display Names",id:"parameter-display-names",level:3},{value:"Required Properties",id:"required-properties",level:3},{value:"Validations",id:"validations",level:3},{value:"Validate",id:"validate",level:3},{value:"Getters With Default Fallbacks",id:"getters-with-default-fallbacks",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"References",id:"references",level:2}];function o(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"c-client-library",children:"C# Client Library"})}),"\n",(0,a.jsx)(n.p,{children:"This document outlines the designs behind the GSF Carbon Aware C# Client\nLibrary."}),"\n",(0,a.jsx)(n.h2,{id:"namespace",children:"Namespace"}),"\n",(0,a.jsxs)(n.p,{children:["Given the fact this is going to be a library exposing functionality to\nconsumers, will use the\n",(0,a.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-namespaces",children:"standard"}),"\nnamespace naming schema:\n",(0,a.jsx)(n.code,{children:"<Company>.(<Product>|<Technology>)[.<Feature>][.<Subnamespace>]"}),". For GSF\nCarbonAware SDK this the following schema:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Company"}),": ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.em,{children:"GSF"})})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Product"}),": ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.em,{children:"CarbonAware"})})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Feature"}),": ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.em,{children:"Models"})}),", ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.em,{children:"Handlers"})}),", ..."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["An example of a namespace would be: ",(0,a.jsx)(n.code,{children:"namespace GSF.CarbonAware.Models"})," and a\nclass (record, interface, ...) that belongs to that namespace would be:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c#",children:"namespace GSF.CarbonAware.Models;\n\npublic record EmissionsData\n{\n    ....\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"The following namespaces are included:"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsx)(n.tr,{children:(0,a.jsx)(n.th,{children:"namespace"})})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsx)(n.tr,{children:(0,a.jsx)(n.td,{children:"GSF.CarbonAware.Exceptions"})}),(0,a.jsx)(n.tr,{children:(0,a.jsx)(n.td,{children:"GSF.CarbonAware.Configuration"})}),(0,a.jsx)(n.tr,{children:(0,a.jsx)(n.td,{children:"GSF.CarbonAware.Handlers"})}),(0,a.jsx)(n.tr,{children:(0,a.jsx)(n.td,{children:"GSF.CarbonAware.Models"})}),(0,a.jsx)(n.tr,{children:(0,a.jsx)(n.td,{children:"GSF.CarbonAware.Parameters"})})]})]}),"\n",(0,a.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,a.jsx)(n.h3,{id:"models",children:"Models"}),"\n",(0,a.jsxs)(n.p,{children:["There are two main classes that represents the data fetched from the data\nsources (i.e ",(0,a.jsx)(n.code,{children:"Static Json"}),", ",(0,a.jsx)(n.a,{href:"https://www.watttime.org",children:"WattTime"}),",\n",(0,a.jsx)(n.a,{href:"https://www.electricitymaps.com",children:"ElectricityMaps"}),"):"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"EmissionsData"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"EmissionsForecast"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"A record is defined for each of these data types owned by the library."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c#",children:"namespace GSF.CarbonAware.Models;\npublic record EmissionsData\n{\n    string Location\n    DateTimeOffset Time\n    double Rating\n    TimeSpan Duration\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c#",children:"namespace GSF.CarbonAware.Models;\npublic record EmissionsForecast\n{\n    DateTimeOffset RequestedAt\n    DateTimeOffset GeneratedAt\n    IEnumerable<EmissionsData> EmissionsDataPoints\n    IEnumerable<EmissionsData> OptimalDataPoints\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The user can expect to either have a primitive type (such as an int) or one of\nthese specific models as a return type of the ",(0,a.jsx)(n.strong,{children:"Handlers"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"handlers",children:"Handlers"}),"\n",(0,a.jsx)(n.p,{children:"There will be two handlers for each of the data types returned:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"EmissionsHandler"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"ForecastHandler"})}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Each is responsible for interacting on its own domain. For instance,\nEmissionsHandler can have a method ",(0,a.jsx)(n.code,{children:"GetAverageCarbonIntensityAsync()"})," to pull\nEmissionsData data from a configured data source and calculate the average\ncarbon intensity. ForecastHandler can have a method ",(0,a.jsx)(n.code,{children:"GetCurrentAsync()"}),", that\nwill return a EmissionsForecast instance. (",(0,a.jsx)(n.strong,{children:"Note"}),": The current core\nimplementation is using async/await paradigm, which would be the default for\nlibrary too)."]}),"\n",(0,a.jsxs)(n.p,{children:["In addition, there is a ",(0,a.jsx)(n.code,{children:"LocationHandler"})," that is responsible for retrieving all\nthe locations supported by the underlying datasource."]}),"\n",(0,a.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsx)(n.p,{children:"Both handlers require that exact fields be passed in as input. Within the docs\nof each library function, we specifically call out which fields the function\nexpects to be defined versus which are optional. Internally, we handle creating\nthe CarbonAwareParameters object and validating the fields through that."}),"\n",(0,a.jsx)(n.h2,{id:"carbon-aware-parameters",children:"Carbon Aware Parameters"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"CarbonAwareParameters"})," class allows the user to pass in a unique parameter\ninstance to the public methods in the Handlers with the specific parameters\nneeded by that call. The list of allowed parameters is defined in the class and\nincludes"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"SingleLocation"}),"\n",(0,a.jsx)(n.li,{children:"MultipleLocations"}),"\n",(0,a.jsx)(n.li,{children:"Start"}),"\n",(0,a.jsx)(n.li,{children:"End"}),"\n",(0,a.jsx)(n.li,{children:"RequestedAt"}),"\n",(0,a.jsx)(n.li,{children:"Duration"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"parameter-display-names",children:"Parameter Display Names"}),"\n",(0,a.jsxs)(n.p,{children:["The display name of each parameter can be overriden using the public setter. By\ndefault, each parameter display name is set to the variable name (ex:\n",(0,a.jsx)(n.code,{children:'Start = "start"'}),"). The parameter display names are used when creating the\nvalidation error messages. Overriding them is useful in situations where the\nvariables the user is using for input don't exactly match the default display\nname of the parameter (e.g. the user variable in the controller is\n",(0,a.jsx)(n.code,{children:"periodStartTime"})," instead of ",(0,a.jsx)(n.code,{children:"startTime"}),"). That way, when the error is thrown to\nthe user, the parameter names will match the users' expectation"]}),"\n",(0,a.jsxs)(n.p,{children:['To do the override, define a class that inherits from\nCarbonAwareParametersBaseDTO and uses the [FromQuery(Name =\n"myAwesomeDisplayName")] or [JsonPropertyName("myAwesomeDisplayName")]\nattribute. A second (less recommended) option is to pass the optional arg\n',(0,a.jsx)(n.code,{children:"Dictionary<string, string>? displayNameMap"})," when you are directly creating the\nobject. With either option, the SDK handles updating references internally."]}),"\n",(0,a.jsx)(n.h3,{id:"required-properties",children:"Required Properties"}),"\n",(0,a.jsxs)(n.p,{children:["The first core check the parameters class does is validating that required\nparameters are defined. By default, all parameters are considered optional.\nCalling the ",(0,a.jsx)(n.code,{children:"SetRequiredProperties(...)"})," function with the desired arguments\nsets the required parameters for the instance."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"    /// <summary>\n    /// Accepts any PropertyNames as arguments and sets the associated property as required for validation.\n    /// </summary>\n    public void SetRequiredProperties(params PropertyName[] requiredProperties)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"validations",children:"Validations"}),"\n",(0,a.jsx)(n.p,{children:"The second core check the parameters class does is enforcing validations on the\nparameters themselves. Some common examples include"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Relationship validations: ",(0,a.jsxs)(n.em,{children:[(0,a.jsx)(n.code,{children:"start < end"})," must be true"]})]}),"\n",(0,a.jsxs)(n.li,{children:["Content validations: ",(0,a.jsxs)(n.em,{children:[(0,a.jsx)(n.code,{children:"list.Any()"})," must be true for list fields"]})]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Calling the ",(0,a.jsx)(n.code,{children:"SetValidations(...)"})," function with the desired arguments sets the\nvalidations for the instance."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"    /// <summary>\n    /// Accepts any ValidationName as arguments and sets the associated validation to check.\n    /// </summary>\n    public void SetValidations(params ValidationName[] validationNames)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"validate",children:"Validate"}),"\n",(0,a.jsxs)(n.p,{children:["Calling the ",(0,a.jsx)(n.code,{children:"Validate(...)"})," function validates (1) required parameters and (2)\nspecified validations. Currently, the only validation we check is whether\n",(0,a.jsx)(n.code,{children:"start"})," is before ",(0,a.jsx)(n.code,{children:"end"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["If no errors are thrown, the function simply returns. If any validation errors\nare found, they are packaged into a single ",(0,a.jsx)(n.code,{children:"ArgumentException"})," error with each\nbeing part of the ",(0,a.jsx)(n.code,{children:"data"})," dictionary."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"    /// <summary>\n    /// Validates the properties and relationships between properties. Any validation errors found are packaged into an\n    /// ArgumentException and thrown. If there are no errors, simply returns void.\n    /// </summary>\n    public void Validate()\n"})}),"\n",(0,a.jsx)(n.h3,{id:"getters-with-default-fallbacks",children:"Getters With Default Fallbacks"}),"\n",(0,a.jsxs)(n.p,{children:["Certain parameters have special getters that allow you to define a fallback\ndefault value if the parameter is null. This can be useful in cases where a\nparameter is optional, so you want to get it if it was defined by the user, or\notherwise fallback to a specific default. These include ",(0,a.jsx)(n.code,{children:"Start"}),", ",(0,a.jsx)(n.code,{children:"End"}),",\n",(0,a.jsx)(n.code,{children:"Requested"}),",and ",(0,a.jsx)(n.code,{children:"Duration"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"   DateTimeOffset StartOrDefault(DateTimeOffset defaultStart)\n   DateTimeOffset EndOrDefault(DateTimeOffset defaultEnd)\n   DateTimeOffset RequestedOrDefault(DateTimeOffset defaultRequested)\n   TimeSpan DurationOrDefault\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"CarbonAwareException"})," class is used to report errors to the consumer. It\nfollows the ",(0,a.jsx)(n.code,{children:"Exception"})," class approach, where messages and details are provided\nas part of error reporting."]}),"\n",(0,a.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/",children:"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var a=r(6540);const s={},t=a.createContext(s);function i(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);